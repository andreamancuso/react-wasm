cmake_minimum_required(VERSION 3.15)
cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0042 NEW)

set(CMAKE_TOOLCHAIN_FILE ../deps/vcpkg/scripts/buildsystems/vcpkg.cmake)

project (node-imgui LANGUAGES C CXX)

set (CMAKE_CXX_STANDARD 23)

set(DEPS ${CMAKE_CURRENT_SOURCE_DIR}/../deps)

find_package(nlohmann_json REQUIRED)
find_package(imgui REQUIRED)
find_package(implot REQUIRED)
find_package(Stb REQUIRED)
find_package(ada CONFIG REQUIRED)
find_package(JPEG REQUIRED)
find_package(PNG REQUIRED)
find_package(TIFF REQUIRED)
find_package(CURL REQUIRED)
find_package(httplib CONFIG REQUIRED)
find_package(OpenSSL REQUIRED)

include_directories(${CMAKE_JS_INC})

file(GLOB YOGA_SRC CONFIGURE_DEPENDS
        ${DEPS}/yoga/yoga/*.cpp
        ${DEPS}/yoga/yoga/**/*.cpp)

#file(GLOB SOURCE_FILES "hello.cc")

add_library(${PROJECT_NAME} SHARED
        ../deps/css-color-parser-cpp/csscolorparser.hpp
        ../deps/css-color-parser-cpp/csscolorparser.cpp

        ../deps/imgui/imgui.cpp
        ../deps/imgui/imgui_draw.cpp
        ../deps/imgui/imgui_widgets.cpp
        ../deps/imgui/imgui_tables.cpp
        ../deps/imgui/backends/imgui_impl_opengl3.cpp
        ../deps/imgui/backends/imgui_impl_glfw.cpp

        ../deps/implot/implot.cpp
        ../deps/implot/implot_items.cpp

        ${YOGA_SRC}

        ../app/src/shared.cpp
        ../app/src/color_helpers.cpp
        ../app/src/yoga_helpers.cpp
        ../app/src/imgui_helpers.cpp

        ../app/src/element/layout_node.cpp
        ../app/src/element/element.cpp

        ../app/src/widget/widget.cpp
        ../app/src/widget/styled_widget.cpp

        ../app/src/widget/button.cpp
        ../app/src/widget/checkbox.cpp
        ../app/src/widget/child.cpp
        ../app/src/widget/clipped_multi_line_text_renderer.cpp
        ../app/src/widget/collapsing_header.cpp
        ../app/src/widget/combo.cpp
        ../app/src/widget/group.cpp
        ../app/src/widget/image.cpp
        ../app/src/widget/input_text.cpp
        ../app/src/widget/item_tooltip.cpp
        ../app/src/widget/multi_slider.cpp
        ../app/src/widget/plot_candlestick.cpp
        ../app/src/widget/plot_line.cpp
        ../app/src/widget/separator.cpp
        ../app/src/widget/separator_text.cpp
        ../app/src/widget/slider.cpp
        ../app/src/widget/table.cpp
        ../app/src/widget/tabs.cpp
        ../app/src/widget/text.cpp
        ../app/src/widget/text_wrap.cpp
        ../app/src/widget/tree_node.cpp
        ../app/src/widget/window.cpp

        ../app/src/reactimgui.cpp
        ../app/src/imgui_renderer.cpp
        ../app/src/implot_renderer.cpp

        hello.cc

        ${SOURCE_FILES}
        ${CMAKE_JS_SRC}
)

add_compile_options(-fno-finite-math-only -O3)
add_link_options(-fno-finite-math-only -O3)
# /p:FooLibDir=..\lib

set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "" SUFFIX ".node")
target_link_libraries(${PROJECT_NAME}
    ${CMAKE_JS_LIB}
    imgui::imgui
    implot::implot
    nlohmann_json::nlohmann_json
    ada::ada
    JPEG::JPEG
    PNG::PNG
    TIFF::TIFF
    CURL::libcurl
    httplib::httplib
    OpenSSL::SSL
    OpenSSL::Crypto
    ${CMAKE_CURRENT_SOURCE_DIR}/glfw3dll.lib
    ${CMAKE_CURRENT_SOURCE_DIR}/opengl32.lib
)

# Include Node-API wrappers
execute_process(COMMAND node -p "require('node-addon-api').include"
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE NODE_ADDON_API_DIR
)
string(REGEX REPLACE "[\r\n\"]" "" NODE_ADDON_API_DIR ${NODE_ADDON_API_DIR})

target_include_directories(${PROJECT_NAME} PRIVATE
        ${NODE_ADDON_API_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}/../app/include
        ${CMAKE_CURRENT_SOURCE_DIR}/node_modules/node-addon-api

        ${Stb_INCLUDE_DIR}

        ../deps/OpenGL-Registry/api
        ../deps/EGL-Registry/api

        ../deps/node-addon-api
        ../deps/node-api-headers/include
        ../deps/IconFontCppHeaders
        ../deps/ReactivePlusPlus/src/rpp
        ../deps/css-color-parser-cpp
        ../deps/yoga
        ../deps/glfw/include
)

# define NAPI_VERSION
add_definitions(-DNAPI_VERSION=9)

if(MSVC AND CMAKE_JS_NODELIB_DEF AND CMAKE_JS_NODELIB_TARGET)
    # Generate node.lib
    execute_process(COMMAND ${CMAKE_AR} /def:${CMAKE_JS_NODELIB_DEF} /out:${CMAKE_JS_NODELIB_TARGET} ${CMAKE_STATIC_LINKER_FLAGS})
endif()

#if (MSVC)

#else()

#endif()